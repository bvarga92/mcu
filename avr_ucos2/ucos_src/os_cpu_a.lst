   1               	# 1 "ucos_src/os_cpu_a.S"
   1               	;**************************************************************************************************
   0               	
   0               	
   2               	;                                               uC/OS-II
   3               	;                                         The Real-Time Kernel
   4               	;
   5               	;                                          AVR Specific code
   6               	;                                           (AVR-GCC 3.x)
   7               	;
   8               	;
   9               	; File         : OS_CPU_A.ASM
  10               	; By           : Ole Saether
  11               	; Port Version : V1.01
  12               	;
  13               	; AVR-GCC port version : 1.0 	2001-04-02 modified/ported to avr-gcc by Jesper Hansen (jesperh@telia
  14               	;
  15               	; Modifications by Julius Luukko 2003-02-19 (Julius.Luukko@lut.fi):
  16               	;
  17               	; - Minor modification to OSTickISR's declaration to global and addition of #include <avr/io.h> 
  18               	;   in order to work with gcc 3.3.
  19               	; - Moved 'sei' from the beginning of OSTickISR after the increasing of OSIntNesting (as the book s
  20               	; - Changed the order of reloading the timer counter and calling of OSIntExit
  21               	; - Changed OSIntCtxSw to the way it is supposed to be with OS_VERSION >= 251
  22               	; - Changed OSTickISR so that is saves the stack pointer into the current task's OS_TCB if OSTickIS
  23               	;   first level ISR
  24               	; - os_cfg.h must be included (definitions of CPU_CLOCK_HZ and OS_TICKS_PER_SEC)
  25               	; - avr/io.h is included to get SIG_OVERFLOW0 to produce the code to the interrupt vector table
  26               	;
  27               	; Modifications by Julius Luukko 2003-03-06 (Julius.Luukko@lut.fi):
  28               	;
  29               	; - RAMPZ is also saved to the stack
  30               	;
  31               	; Modifications by Julius Luukko 2003-03-18 (Julius.Luukko@lut.fi):
  32               	;
  33               	; - RAMPZ and SREG were popped out of the stack in the wrong order! Corrected this.
  34               	; - Divided macros PUSHRS and POPRS into to macros PUSHRS, PUSHSREG, POPRS and POPSREG. Additionall
  35               	; in ISRs macro called PUSHSREGISR must be used. It sets the I bit i SREG, since its always unset, 
  36               	; ISR is entered. It must be, however, set to enable interrupts when the task is run again.
  37               	; - RCALLs changed to CALLs. This allows the code of called functions to be further away from the c
  38               	;   (fixes the "relocating truncated to fit" error from the linker)
  39               	; 
  40               	;
  41               	; Modifications by Julius Luukko 2003-03-19 (Julius.Luukko@lut.fi):
  42               	;
  43               	; - timer interrupt is changed so that the timer counter register is updated right after _not_first
  44               	;   (was AFTER the call to OSIntExit!!)
  45               	;
  46               	; Modifications by Julius Luukko 2003-06-24 (Julius.Luukko@lut.fi):
  47               	;
  48               	; - I/O port addressing is now done using the macro _SFR_IO_ADDR from avr-libc and the address
  49               	; definitions are removed from here
  50               	; - RAMPZ is pushed and popped only if it is defined, i.e. with chips that have it
  51               	;**************************************************************************************************
  52               	
  53               	#include <avr/io.h>
   1               	/* Copyright (c) 2002,2003,2005,2006,2007 Marek Michalkiewicz, Joerg Wunsch
   2               	   Copyright (c) 2007 Eric B. Weddington
   3               	   All rights reserved.
   4               	
   5               	   Redistribution and use in source and binary forms, with or without
   6               	   modification, are permitted provided that the following conditions are met:
   7               	
   8               	   * Redistributions of source code must retain the above copyright
   9               	     notice, this list of conditions and the following disclaimer.
  10               	
  11               	   * Redistributions in binary form must reproduce the above copyright
  12               	     notice, this list of conditions and the following disclaimer in
  13               	     the documentation and/or other materials provided with the
  14               	     distribution.
  15               	
  16               	   * Neither the name of the copyright holders nor the names of
  17               	     contributors may be used to endorse or promote products derived
  18               	     from this software without specific prior written permission.
  19               	
  20               	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21               	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22               	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23               	  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24               	  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25               	  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26               	  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27               	  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28               	  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29               	  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30               	  POSSIBILITY OF SUCH DAMAGE. */
  31               	
  32               	/* $Id: io.h,v 1.52 2007/11/29 22:37:14 arcanum Exp $ */
  33               	
  34               	/** \file */
  35               	/** \defgroup avr_io <avr/io.h>: AVR device-specific IO definitions
  36               	    \code #include <avr/io.h> \endcode
  37               	
  38               	    This header file includes the apropriate IO definitions for the
  39               	    device that has been specified by the <tt>-mmcu=</tt> compiler
  40               	    command-line switch.  This is done by diverting to the appropriate
  41               	    file <tt>&lt;avr/io</tt><em>XXXX</em><tt>.h&gt;</tt> which should
  42               	    never be included directly.  Some register names common to all
  43               	    AVR devices are defined directly within <tt>&lt;avr/common.h&gt;</tt>,
  44               	    which is included in <tt>&lt;avr/io.h&gt;</tt>,
  45               	    but most of the details come from the respective include file.
  46               	
  47               	    Note that this file always includes the following files:
  48               	    \code 
  49               	    #include <avr/sfr_defs.h>
  50               	    #include <avr/portpins.h>
  51               	    #include <avr/common.h>
  52               	    #include <avr/version.h>
  53               	    \endcode
  54               	    See \ref avr_sfr for more details about that header file.
  55               	
  56               	    Included are definitions of the IO register set and their
  57               	    respective bit values as specified in the Atmel documentation.
  58               	    Note that inconsistencies in naming conventions,
  59               	    so even identical functions sometimes get different names on
  60               	    different devices.
  61               	
  62               	    Also included are the specific names useable for interrupt
  63               	    function definitions as documented
  64               	    \ref avr_signames "here".
  65               	
  66               	    Finally, the following macros are defined:
  67               	
  68               	    - \b RAMEND
  69               	    <br>
  70               	    A constant describing the last on-chip RAM location.
  71               	    <br>
  72               	    - \b XRAMEND
  73               	    <br>
  74               	    A constant describing the last possible location in RAM.
  75               	    This is equal to RAMEND for devices that do not allow for
  76               	    external RAM.
  77               	    <br>
  78               	    - \b E2END
  79               	    <br>
  80               	    A constant describing the address of the last EEPROM cell.
  81               	    <br>
  82               	    - \b FLASHEND
  83               	    <br>
  84               	    A constant describing the last byte address in flash ROM.
  85               	    <br>
  86               	    - \b SPM_PAGESIZE
  87               	    <br>
  88               	    For devices with bootloader support, the flash pagesize
  89               	    (in bytes) to be used for the \c SPM instruction. */
  90               	
  91               	#ifndef _AVR_IO_H_
  92               	#define _AVR_IO_H_
  93               	
  94               	#include <avr/sfr_defs.h>
   1               	/* Copyright (c) 2002, Marek Michalkiewicz <marekm@amelek.gda.pl>
  95               	
  96               	#if defined (__AVR_AT94K__)
  97               	#  include <avr/ioat94k.h>
  98               	#elif defined (__AVR_AT43USB320__)
  99               	#  include <avr/io43u32x.h>
 100               	#elif defined (__AVR_AT43USB355__)
 101               	#  include <avr/io43u35x.h>
 102               	#elif defined (__AVR_AT76C711__)
 103               	#  include <avr/io76c711.h>
 104               	#elif defined (__AVR_AT86RF401__)
 105               	#  include <avr/io86r401.h>
 106               	#elif defined (__AVR_AT90PWM1__)
 107               	#  include <avr/io90pwm1.h>
 108               	#elif defined (__AVR_AT90PWM2__)
 109               	#  include <avr/io90pwmx.h>
 110               	#elif defined (__AVR_AT90PWM2B__)
 111               	#  include <avr/io90pwm2b.h>
 112               	#elif defined (__AVR_AT90PWM3__)
 113               	#  include <avr/io90pwmx.h>
 114               	#elif defined (__AVR_AT90PWM3B__)
 115               	#  include <avr/io90pwm3b.h>
 116               	#elif defined (__AVR_AT90PWM216__)
 117               	#  include <avr/io90pwm216.h>
 118               	#elif defined (__AVR_AT90PWM316__)
 119               	#  include <avr/io90pwm316.h>
 120               	#elif defined (__AVR_ATmega128__)
 121               	#  include <avr/iom128.h>
   1               	/* Copyright (c) 2002, Peter Jansen
 122               	#elif defined (__AVR_ATmega1280__)
 123               	#  include <avr/iom1280.h>
 124               	#elif defined (__AVR_ATmega1281__)
 125               	#  include <avr/iom1281.h>
 126               	#elif defined (__AVR_ATmega1284P__)
 127               	#  include <avr/iom1284p.h>
 128               	#elif defined (__AVR_ATmega2560__)
 129               	#  include <avr/iom2560.h>
 130               	#elif defined (__AVR_ATmega2561__)
 131               	#  include <avr/iom2561.h>
 132               	#elif defined (__AVR_AT90CAN32__)
 133               	#  include <avr/iocan32.h>
 134               	#elif defined (__AVR_AT90CAN64__)
 135               	#  include <avr/iocan64.h>
 136               	#elif defined (__AVR_AT90CAN128__)
 137               	#  include <avr/iocan128.h>
 138               	#elif defined (__AVR_AT90USB82__)
 139               	#  include <avr/iousb82.h>
 140               	#elif defined (__AVR_AT90USB162__)
 141               	#  include <avr/iousb162.h>
 142               	#elif defined (__AVR_AT90USB646__)
 143               	#  include <avr/iousb646.h>
 144               	#elif defined (__AVR_AT90USB647__)
 145               	#  include <avr/iousb647.h>
 146               	#elif defined (__AVR_AT90USB1286__)
 147               	#  include <avr/iousb1286.h>
 148               	#elif defined (__AVR_AT90USB1287__)
 149               	#  include <avr/iousb1287.h>
 150               	#elif defined (__AVR_ATmega64__)
 151               	#  include <avr/iom64.h>
 152               	#elif defined (__AVR_ATmega640__)
 153               	#  include <avr/iom640.h>
 154               	#elif defined (__AVR_ATmega644__)
 155               	#  include <avr/iom644.h>
 156               	#elif defined (__AVR_ATmega644P__)
 157               	#  include <avr/iom644.h>
 158               	#elif defined (__AVR_ATmega645__)
 159               	#  include <avr/iom645.h>
 160               	#elif defined (__AVR_ATmega6450__)
 161               	#  include <avr/iom6450.h>
 162               	#elif defined (__AVR_ATmega649__)
 163               	#  include <avr/iom649.h>
 164               	#elif defined (__AVR_ATmega6490__)
 165               	#  include <avr/iom6490.h>
 166               	#elif defined (__AVR_ATmega103__)
 167               	#  include <avr/iom103.h>
 168               	#elif defined (__AVR_ATmega32__)
 169               	#  include <avr/iom32.h>
 170               	#elif defined (__AVR_ATmega323__)
 171               	#  include <avr/iom323.h>
 172               	#elif defined (__AVR_ATmega324P__)
 173               	#  include <avr/iom324.h>
 174               	#elif defined (__AVR_ATmega325__)
 175               	#  include <avr/iom325.h>
 176               	#elif defined (__AVR_ATmega325P__)
 177               	#  include <avr/iom325.h>
 178               	#elif defined (__AVR_ATmega3250__)
 179               	#  include <avr/iom3250.h>
 180               	#elif defined (__AVR_ATmega3250P__)
 181               	#  include <avr/iom3250.h>
 182               	#elif defined (__AVR_ATmega328P__)
 183               	#  include <avr/iom328p.h>
 184               	#elif defined (__AVR_ATmega329__)
 185               	#  include <avr/iom329.h>
 186               	#elif defined (__AVR_ATmega329P__)
 187               	#  include <avr/iom329.h>
 188               	#elif defined (__AVR_ATmega3290__)
 189               	#  include <avr/iom3290.h>
 190               	#elif defined (__AVR_ATmega3290P__)
 191               	#  include <avr/iom3290.h>
 192               	#elif defined (__AVR_ATmega32HVB__)
 193               	#  include <avr/iom32hvb.h>
 194               	#elif defined (__AVR_ATmega406__)
 195               	#  include <avr/iom406.h>
 196               	#elif defined (__AVR_ATmega16__)
 197               	#  include <avr/iom16.h>
 198               	#elif defined (__AVR_ATmega161__)
 199               	#  include <avr/iom161.h>
 200               	#elif defined (__AVR_ATmega162__)
 201               	#  include <avr/iom162.h>
 202               	#elif defined (__AVR_ATmega163__)
 203               	#  include <avr/iom163.h>
 204               	#elif defined (__AVR_ATmega164P__)
 205               	#  include <avr/iom164.h>
 206               	#elif defined (__AVR_ATmega165__)
 207               	#  include <avr/iom165.h>
 208               	#elif defined (__AVR_ATmega165P__)
 209               	#  include <avr/iom165p.h>
 210               	#elif defined (__AVR_ATmega168__)
 211               	#  include <avr/iom168.h>
 212               	#elif defined (__AVR_ATmega168P__)
 213               	#  include <avr/iom168p.h>
 214               	#elif defined (__AVR_ATmega169__)
 215               	#  include <avr/iom169.h>
 216               	#elif defined (__AVR_ATmega169P__)
 217               	#  include <avr/iom169p.h>
 218               	#elif defined (__AVR_ATmega8HVA__)
 219               	#  include <avr/iom8hva.h>
 220               	#elif defined (__AVR_ATmega16HVA__)
 221               	#  include <avr/iom16hva.h>
 222               	#elif defined (__AVR_ATmega8__)
 223               	#  include <avr/iom8.h>
 224               	#elif defined (__AVR_ATmega48__)
 225               	#  include <avr/iom48.h>
 226               	#elif defined (__AVR_ATmega48P__)
 227               	#  include <avr/iom48p.h>
 228               	#elif defined (__AVR_ATmega88__)
 229               	#  include <avr/iom88.h>
 230               	#elif defined (__AVR_ATmega88P__)
 231               	#  include <avr/iom88p.h>
 232               	#elif defined (__AVR_ATmega8515__)
 233               	#  include <avr/iom8515.h>
 234               	#elif defined (__AVR_ATmega8535__)
 235               	#  include <avr/iom8535.h>
 236               	#elif defined (__AVR_AT90S8535__)
 237               	#  include <avr/io8535.h>
 238               	#elif defined (__AVR_AT90C8534__)
 239               	#  include <avr/io8534.h>
 240               	#elif defined (__AVR_AT90S8515__)
 241               	#  include <avr/io8515.h>
 242               	#elif defined (__AVR_AT90S4434__)
 243               	#  include <avr/io4434.h>
 244               	#elif defined (__AVR_AT90S4433__)
 245               	#  include <avr/io4433.h>
 246               	#elif defined (__AVR_AT90S4414__)
 247               	#  include <avr/io4414.h>
 248               	#elif defined (__AVR_ATtiny22__)
 249               	#  include <avr/iotn22.h>
 250               	#elif defined (__AVR_ATtiny26__)
 251               	#  include <avr/iotn26.h>
 252               	#elif defined (__AVR_AT90S2343__)
 253               	#  include <avr/io2343.h>
 254               	#elif defined (__AVR_AT90S2333__)
 255               	#  include <avr/io2333.h>
 256               	#elif defined (__AVR_AT90S2323__)
 257               	#  include <avr/io2323.h>
 258               	#elif defined (__AVR_AT90S2313__)
 259               	#  include <avr/io2313.h>
 260               	#elif defined (__AVR_ATtiny2313__)
 261               	#  include <avr/iotn2313.h>
 262               	#elif defined (__AVR_ATtiny13__)
 263               	#  include <avr/iotn13.h>
 264               	#elif defined (__AVR_ATtiny25__)
 265               	#  include <avr/iotn25.h>
 266               	#elif defined (__AVR_ATtiny45__)
 267               	#  include <avr/iotn45.h>
 268               	#elif defined (__AVR_ATtiny85__)
 269               	#  include <avr/iotn85.h>
 270               	#elif defined (__AVR_ATtiny24__)
 271               	#  include <avr/iotn24.h>
 272               	#elif defined (__AVR_ATtiny44__)
 273               	#  include <avr/iotn44.h>
 274               	#elif defined (__AVR_ATtiny84__)
 275               	#  include <avr/iotn84.h>
 276               	#elif defined (__AVR_ATtiny261__)
 277               	#  include <avr/iotn261.h>
 278               	#elif defined (__AVR_ATtiny461__)
 279               	#  include <avr/iotn461.h>
 280               	#elif defined (__AVR_ATtiny861__)
 281               	#  include <avr/iotn861.h>
 282               	#elif defined (__AVR_ATtiny43U__)
 283               	#  include <avr/iotn43u.h>
 284               	#elif defined (__AVR_ATtiny48__)
 285               	#  include <avr/iotn48.h>
 286               	#elif defined (__AVR_ATtiny88__)
 287               	#  include <avr/iotn88.h>
 288               	/* avr1: the following only supported for assembler programs */
 289               	#elif defined (__AVR_ATtiny28__)
 290               	#  include <avr/iotn28.h>
 291               	#elif defined (__AVR_AT90S1200__)
 292               	#  include <avr/io1200.h>
 293               	#elif defined (__AVR_ATtiny15__)
 294               	#  include <avr/iotn15.h>
 295               	#elif defined (__AVR_ATtiny12__)
 296               	#  include <avr/iotn12.h>
 297               	#elif defined (__AVR_ATtiny11__)
 298               	#  include <avr/iotn11.h>
 299               	#else
 300               	#  if !defined(__COMPILING_AVR_LIBC__)
 301               	#    warning "device type not defined"
 302               	#  endif
 303               	#endif
 304               	
 305               	#include <avr/portpins.h>
   1               	/* Copyright (c) 2003  Theodore A. Roth
 306               	
 307               	#include <avr/common.h>
   1               	/* Copyright (c) 2007 Eric B. Weddington
 308               	
 309               	#include <avr/version.h>
   1               	/* Copyright (c) 2005, Joerg Wunsch                               -*- c -*-
 310               	
 311               	/* Include fuse.h after individual IO header files. */
 312               	#include <avr/fuse.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 313               	
 314               	/* Include lock.h after individual IO header files. */
 315               	#include <avr/lock.h>
   1               	/* Copyright (c) 2007, Atmel Corporation
 316               	
  54               	
  55               	#define OS_CPU_A
  56               	#include "os_cpu.h"
   1               	/*
  57               	#include "os_cfg.h"
   1               	/*
  58               	
  59               	;**************************************************************************************************
  60               	;                                          PUBLIC DECLARATIONS
  61               	;**************************************************************************************************
  62               	
  63               	                .global OSStartHighRdy
  64               	                .global OSCtxSw
  65               	                .global OSIntCtxSw
  66               	                .global	OSTickISR
  67               	
  68               	;**************************************************************************************************
  69               	;                                         EXTERNAL DECLARATIONS
  70               	;**************************************************************************************************
  71               	
  72               	                .extern	OSIntExit
  73               	                .extern	OSIntNesting
  74               	                .extern	OSPrioCur
  75               	                .extern	OSPrioHighRdy
  76               	                .extern	OSRunning
  77               	                .extern	OSTaskSwHook
  78               	                .extern	OSTCBCur
  79               	                .extern	OSTCBHighRdy
  80               	                .extern	OSTimeTick
  81               	
  82               	;**************************************************************************************************
  83               	;                                         MACROS
  84               	;**************************************************************************************************
  85               	
  86               	; Push all registers and the status register	
  87               	.macro	PUSHRS
  88               	
  89               	                push	r0
  90               	                push	r1
  91               	                push	r2
  92               	                push	r3
  93               	                push	r4
  94               	                push	r5
  95               	                push	r6
  96               	                push	r7
  97               	                push	r8
  98               	                push	r9
  99               	                push	r10
 100               	                push	r11
 101               	                push	r12
 102               	                push	r13
 103               	                push	r14
 104               	                push	r15
 105               	                push	r16
 106               	                push	r17
 107               	                push	r18
 108               	                push	r19
 109               	                push	r20
 110               	                push	r21
 111               	                push	r22
 112               	                push	r23
 113               	                push	r24
 114               	                push	r25
 115               	                push	r26
 116               	                push	r27
 117               	                push	r28
 118               	                push	r29
 119               	                push	r30
 120               	                push	r31
 121               	#ifdef RAMPZ
 122               	                in      r16,_SFR_IO_ADDR(RAMPZ)
 123               	                push	r16
 124               	#endif
 125               	.endm
 126               	
 127               	; Pop all registers and the status registers
 128               	.macro	POPRS
 129               	
 130               	#ifdef RAMPZ
 131               	                pop     r16
 132               	                out     _SFR_IO_ADDR(RAMPZ),r16
 133               	#endif
 134               	                pop     r31
 135               	                pop     r30
 136               	                pop     r29
 137               	                pop     r28
 138               	                pop     r27
 139               	                pop     r26
 140               	                pop     r25
 141               	                pop     r24
 142               	                pop     r23
 143               	                pop     r22
 144               	                pop     r21
 145               	                pop     r20
 146               	                pop     r19
 147               	                pop     r18
 148               	                pop     r17
 149               	                pop     r16
 150               	                pop     r15
 151               	                pop     r14
 152               	                pop     r13
 153               	                pop     r12
 154               	                pop     r11
 155               	                pop     r10
 156               	                pop     r9
 157               	                pop     r8
 158               	                pop     r7
 159               	                pop     r6
 160               	                pop     r5
 161               	                pop     r4
 162               	                pop     r3
 163               	                pop     r2
 164               	                pop     r1
 165               	                pop     r0
 166               	
 167               	.endm
 168               	
 169               	.macro	POPSREG
 170               	
 171               	                pop     r16
 172               	                out     _SFR_IO_ADDR(SREG),r16
 173               	
 174               	.endm
 175               	
 176               	.macro	PUSHSREG
 177               	
 178               	                in      r16,_SFR_IO_ADDR(SREG)
 179               	                push	r16
 180               	
 181               	.endm
 182               	
 183               	.macro	PUSHSREGISR
 184               	
 185               	                in      r16,_SFR_IO_ADDR(SREG)
 186               	                sbr     r16,0x80
 187               	                push	r16
 188               	
 189               	.endm
 190               	
 191               	
 192               	                	.text
 193               	                	.section	.text
 194               				
 195               	
 196               	;**************************************************************************************************
 197               	;                               START HIGHEST PRIORITY TASK READY-TO-RUN
 198               	;
 199               	; Description : This function is called by OSStart() to start the highest priority task that was cr
 200               	;               by your application before calling OSStart().
 201               	;
 202               	; Note(s)     : 1) The (data)stack frame is assumed to look as follows:
 203               	;
 204               	;                  OSTCBHighRdy->OSTCBStkPtr --> LSB of (return) stack pointer           (Low memor
 205               	;                                                SPH of (return) stack pointer
 206               	;                                                Flags to load in status register
 207               	;                                                R31
 208               	;                                                R30
 209               	;                                                R7
 210               	;                                                .
 211               	;                                                .
 212               	;                                                .
 213               	;                                                R0                                      (High memo
 214               	;
 215               	;                  where the stack pointer points to the task start address.
 216               	;
 217               	;
 218               	;               2) OSStartHighRdy() MUST:
 219               	;                      a) Call OSTaskSwHook() then,
 220               	;                      b) Set OSRunning to TRUE,
 221               	;                      c) Switch to the highest priority task.
 222               	;**************************************************************************************************
 223               	
 224:ucos_src/os_cpu_a.S **** OSStartHighRdy: CALL    OSTaskSwHook                ; Invoke user defined context switch hook
 225:ucos_src/os_cpu_a.S ****                 LDS     R16,OSRunning               ; Indicate that we are multitasking
 226:ucos_src/os_cpu_a.S ****                 INC     R16                         ;
 227:ucos_src/os_cpu_a.S ****                 STS     OSRunning,R16               ;
 228               	
 229:ucos_src/os_cpu_a.S ****                 LDS     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
 230:ucos_src/os_cpu_a.S ****                 LDS     R31,OSTCBHighRdy+1          ; ready to run
 231               	
 232:ucos_src/os_cpu_a.S ****                 LD      R28,Z+                      ; Load stack L pointer
 233:ucos_src/os_cpu_a.S ****                 out     _SFR_IO_ADDR(SPL),R28
 234:ucos_src/os_cpu_a.S ****                 LD      R29,Z+                      ;
 235:ucos_src/os_cpu_a.S ****                 out     _SFR_IO_ADDR(SPH),R29
 236               	
 237:ucos_src/os_cpu_a.S ****                 POPSREG                             ; Pop the status register
 238:ucos_src/os_cpu_a.S ****                 POPRS                               ; Pop all registers
 239:ucos_src/os_cpu_a.S ****                 RET                                 ; Start task
 240               	
 241               	;**************************************************************************************************
 242               	;                                       TASK LEVEL CONTEXT SWITCH
 243               	;
 244               	; Description : This function is called when a task makes a higher priority task ready-to-run.
 245               	;
 246               	; Note(s)     : 1) Upon entry,
 247               	;                  OSTCBCur     points to the OS_TCB of the task to suspend
 248               	;                  OSTCBHighRdy points to the OS_TCB of the task to resume
 249               	;
 250               	;               2) The stack frame of the task to suspend looks as follows:
 251               	;
 252               	;                                       SP+0 --> LSB of task code address
 253               	;                                         +1     MSB of task code address                (High memo
 254               	;
 255               	;               3) The saved context of the task to resume looks as follows:
 256               	;
 257               	;                  OSTCBHighRdy->OSTCBStkPtr --> LSB of (return) stack pointer           (Low memor
 258               	;                                                SPH of (return) stack pointer
 259               	;                                                Flags to load in status register
 260               	;                                                R31
 261               	;                                                R30
 262               	;                                                R7
 263               	;                                                .
 264               	;                                                .
 265               	;                                                .
 266               	;                                                R0                                      (High memo
 267               	;**************************************************************************************************
 268               	
 269:ucos_src/os_cpu_a.S **** OSCtxSw:        PUSHRS                              ; Save current tasks context
 270:ucos_src/os_cpu_a.S ****                 PUSHSREG                            ; Save SREG
 271               	
 272:ucos_src/os_cpu_a.S ****                 LDS     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
 273:ucos_src/os_cpu_a.S ****                 LDS     R31,OSTCBCur+1              ;
 274               	
 275:ucos_src/os_cpu_a.S ****                 in      r28,_SFR_IO_ADDR(SPL)
 276:ucos_src/os_cpu_a.S ****                 ST      Z+,R28                      ; Save Y (R29:R28) pointer
 277:ucos_src/os_cpu_a.S ****                 in      r29,_SFR_IO_ADDR(SPH)
 278:ucos_src/os_cpu_a.S ****                 ST      Z+,R29                      ;
 279               	
 280:ucos_src/os_cpu_a.S ****                 CALL    OSTaskSwHook                ; Call user defined task switch hook
 281               	
 282:ucos_src/os_cpu_a.S ****                 LDS     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
 283:ucos_src/os_cpu_a.S ****                 STS     OSPrioCur,R16
 284               	
 285:ucos_src/os_cpu_a.S ****                 LDS     R30,OSTCBHighRdy            ; Let Z point to TCB of highest priority task
 286:ucos_src/os_cpu_a.S ****                 LDS     R31,OSTCBHighRdy+1          ; ready to run
 287:ucos_src/os_cpu_a.S ****                 STS     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
 288:ucos_src/os_cpu_a.S ****                 STS     OSTCBCur+1,R31              ;
 289               	
 290:ucos_src/os_cpu_a.S ****                 LD      R28,Z+                      ; Restore Y pointer
 291:ucos_src/os_cpu_a.S ****                 out     _SFR_IO_ADDR(SPL),R28
 292:ucos_src/os_cpu_a.S ****                 LD      R29,Z+                      ;
 293:ucos_src/os_cpu_a.S ****                 out     _SFR_IO_ADDR(SPH),R29
 294               	
 295:ucos_src/os_cpu_a.S ****                 POPSREG                             ; Restore the status register
 296:ucos_src/os_cpu_a.S ****                 POPRS                               ; Restore all registers
 297:ucos_src/os_cpu_a.S ****                 RET
 298               	
 299               	
 300               	;**************************************************************************************************
 301               	;                                INTERRUPT LEVEL CONTEXT SWITCH
 302               	;
 303               	; Description : This function is called by OSIntExit() to perform a context switch to a task that h
 304               	;               been made ready-to-run by an ISR.
 305               	;
 306               	; Note(s)     : 1) Upon entry,
 307               	;                  OSTCBCur     points to the OS_TCB of the task to suspend
 308               	;                  OSTCBHighRdy points to the OS_TCB of the task to resume
 309               	;
 310               	;               2) The stack frame of the task to suspend looks as follows:
 311               	;
 312               	;                                       SP+0 --> LSB of return address of OSIntCtxSw()   (Low memor
 313               	;                                         +1     MSB of return address of OSIntCtxSw()
 314               	;                                         +2     LSB of return address of OSIntExit()
 315               	;                                         +3     MSB of return address of OSIntExit()
 316               	;			 							possible SREG save	
 317               	;                                         +4     LSB of task code address
 318               	;                                         +5     MSB of task code address                (High memo
 319               	;
 320               	;               3) The saved context of the task to resume looks as follows:
 321               	;
 322               	;                  OSTCBHighRdy->OSTCBStkPtr --> Flags to load in status register         (Low memo
 323               	;                                                R31
 324               	;                                                R30
 325               	;                                                R7
 326               	;                                                .
 327               	;                                                .
 328               	;                                                .
 329               	;                                                R0                                      (High memo
 330               	;**************************************************************************************************
 331               	
 332               	OSIntCtxSw:     
 333               	;**************************************************************************************************
 334               	; You should enable the lines between #if 0 and #endif only if you use uC/OS-II version 2.51 or bel
 335               	; (Unfortunately OS_VERSION is not defined here (how to do it elegantly?)
 336               	;**************************************************************************************************
 337               	#if 0
 338               	                IN      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
 339               	                IN      R29,_SFR_IO_ADDR(SPH)
 340               	
 341               	#if      OS_CRITICAL_METHOD == 1
 342               	                ADIW    R28,4                       ; Use if OS_CRITICAL_METHOD is 1, see OS_CPU.H
 343               	#endif
 344               	#if      OS_CRITICAL_METHOD == 2
 345               	                ADIW    R28,5                       ; Use if OS_CRITICAL_METHOD is 2, see OS_CPU.H
 346               	#endif
 347               	
 348               	                LDS     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
 349               	                LDS     R31,OSTCBCur+1              ;
 350               	                ST      Z+,R28                      ; Save Y pointer
 351               	                ST      Z+,R29                      ;
 352               	#endif
 353               	;**************************************************************************************************
 354:ucos_src/os_cpu_a.S ****                 CALL    OSTaskSwHook                ; Call user defined task switch hook
 355               	
 356:ucos_src/os_cpu_a.S ****                 LDS     R16,OSPrioHighRdy           ; OSPrioCur = OSPrioHighRdy
 357:ucos_src/os_cpu_a.S ****                 STS     OSPrioCur,R16               ;
 358               	
 359:ucos_src/os_cpu_a.S ****                 LDS     R30,OSTCBHighRdy            ; Z = OSTCBHighRdy->OSTCBStkPtr
 360:ucos_src/os_cpu_a.S ****                 LDS     R31,OSTCBHighRdy+1          ;
 361:ucos_src/os_cpu_a.S ****                 STS     OSTCBCur,R30                ; OSTCBCur = OSTCBHighRdy
 362:ucos_src/os_cpu_a.S ****                 STS     OSTCBCur+1,R31              ;
 363               	
 364:ucos_src/os_cpu_a.S ****                 LD      R28,Z+                      ; Restore Y pointer
 365:ucos_src/os_cpu_a.S ****                 out     _SFR_IO_ADDR(SPL),R28
 366:ucos_src/os_cpu_a.S ****                 LD      R29,Z+                      ;
 367:ucos_src/os_cpu_a.S ****                 out     _SFR_IO_ADDR(SPH),R29
 368               	
 369:ucos_src/os_cpu_a.S ****                 POPSREG                             ; Restore the status register
 370:ucos_src/os_cpu_a.S ****                 POPRS                               ; Restore all registers
 371:ucos_src/os_cpu_a.S ****                 RET
 372               	
 373               	;**************************************************************************************************
 374               	;                                           SYSTEM TICK ISR
 375               	;
 376               	; Description : This function is the ISR used to notify uC/OS-II that a system tick has occurred.
 377               	;
 378               	; (Julius Luukko/2003-02-14): Changed the name of vector to SIG_OVERFLOW0. In order to the correspo
 379               	; interrupt vector to be set to point to SIG_OVERFLOW0, one has to also #include <avr/io.h> in this
 380               	; Note that no error message or warning will be given, if the include is not present, the interupt 
 381               	; won't get vectored.
 382               	;
 383               	;**************************************************************************************************
 384               	.global	SIG_OVERFLOW0
 385               	SIG_OVERFLOW0:
 386:ucos_src/os_cpu_a.S **** OSTickISR:      PUSHRS                              ; Save all registers
 387:ucos_src/os_cpu_a.S ****                 PUSHSREGISR                         ; Save SREG with I bit set!
 388               	
 389:ucos_src/os_cpu_a.S ****                 LDS     R16,OSIntNesting            ; Notify uC/OS-II of ISR
 390:ucos_src/os_cpu_a.S ****                 INC     R16                         ;
 391:ucos_src/os_cpu_a.S ****                 STS     OSIntNesting,R16            ;
 392               	                
 393               	;**************************************************************************************************
 394               	; You should disable the lines between #if 1 and #endif if you use uC/OS-II version 2.51 or below!
 395               	; (Unfortunately OS_VERSION is not defined here (how to do it elegantly? On possibility would be to
 396               	;  code this ISR with C in os_cpu_c.c or use inline assembler in os_cpu_c.c)
 397               	;**************************************************************************************************
 398               	#if 1
 399:ucos_src/os_cpu_a.S ****                 cpi     R16,0x01
 400:ucos_src/os_cpu_a.S ****                 brne    _not_first_int
 401               	
 402:ucos_src/os_cpu_a.S ****                 IN      R28,_SFR_IO_ADDR(SPL)       ; Z = SP
 403:ucos_src/os_cpu_a.S ****                 IN      R29,_SFR_IO_ADDR(SPH)
 404:ucos_src/os_cpu_a.S ****                 LDS     R30,OSTCBCur                ; Z = OSTCBCur->OSTCBStkPtr
 405:ucos_src/os_cpu_a.S ****                 LDS     R31,OSTCBCur+1              ;
 406:ucos_src/os_cpu_a.S ****                 ST      Z+,R28                      ; Save Y pointer
 407:ucos_src/os_cpu_a.S ****                 ST      Z+,R29                      ;
 408               	_not_first_int:
 409               	#endif
 410:ucos_src/os_cpu_a.S ****                 LDI     R16,256-(CPU_CLOCK_HZ/OS_TICKS_PER_SEC/1024)   
 411               	                                                    ; Reload timer to overflow at a rate of OS_TICK
 412:ucos_src/os_cpu_a.S ****                 OUT     _SFR_IO_ADDR(TCNT0),R16     ; at a prescaler of 1024 and CPU_CLOCK_HZ AVR c
 413               		
 414:ucos_src/os_cpu_a.S ****                 SEI                                 ; Enable interrupts
 415               	                
 416:ucos_src/os_cpu_a.S ****                 CALL    OSTimeTick                  ; Call uC/OS-IIs tick updating function
 417:ucos_src/os_cpu_a.S ****                 NOP
 418:ucos_src/os_cpu_a.S ****                 CALL    OSIntExit                   ; Notify uC/OS-II about end of ISR
 419               	
 420:ucos_src/os_cpu_a.S ****                 POPSREG
 421:ucos_src/os_cpu_a.S ****                 POPRS                               ; Restore all registers and status register
 422:ucos_src/os_cpu_a.S ****                 RET                                 ; Note: RET instead of RETI
DEFINED SYMBOLS
 ucos_src/os_cpu_a.S:224    .text:00000000 OSStartHighRdy
 ucos_src/os_cpu_a.S:269    .text:00000068 OSCtxSw
 ucos_src/os_cpu_a.S:332    .text:0000012e OSIntCtxSw
 ucos_src/os_cpu_a.S:386    .text:0000019c OSTickISR
 ucos_src/os_cpu_a.S:385    .text:0000019c __vector_16
 ucos_src/os_cpu_a.S:408    .text:00000204 _not_first_int

UNDEFINED SYMBOLS
OSTaskSwHook
OSRunning
OSTCBHighRdy
OSTCBCur
OSPrioHighRdy
OSPrioCur
OSIntNesting
OSTimeTick
OSIntExit
